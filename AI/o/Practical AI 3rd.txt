GREEDY ALGOROTHM 

1> SELECTION SORT

def selection_sort(arr):
    n = len(arr)
    
    for i in range(n):
        # Find the index of the minimum element in the remaining unsorted array
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
                
        # Swap the found minimum element with the first element
        arr[i], arr[min_index] = arr[min_index], arr[i]
    
    return arr

# Example usage:
arr = [64, 25, 12, 22, 11]
sorted_arr = selection_sort(arr)
print("Sorted array:", sorted_arr)

2> KRUSKAL'S ALGORITHM
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    def sort_key(self, x):
        return x[2]

    def find_root(self, parent, k):
        if parent[k] == k:
            return k
        else:
            return self.find_root(parent, parent[k])

    def kruskal_mst(self):
        result, i, e = [], 0, 0
        self.graph.sort(key=self.sort_key)
        parent = list(range(self.V))

        while e < self.V - 1:
            u, v, w = self.graph[i]
            i += 1
            x = self.find_root(parent, u)
            y = self.find_root(parent, v)
            if x != y:
                e += 1
                result.append([u, v, w])
                parent[x] = y

        print("Edges in the constructed MST:")
        for u, v, weight in result:
            print(f"{u} - {v} : {weight}")

# Example usage:
g = Graph(4)
g.add_edge(0, 1, 10)
g.add_edge(0, 2, 6)
g.add_edge(0, 3, 5)
g.add_edge(1, 3, 15)
g.add_edge(2, 3, 4)

g.kruskal_mst()


3> PRIM'S ALGORITHM


class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def add_edge(self, u, v, w):
        self.graph[u][v] = w
        self.graph[v][u] = w

    def min_key(self, key, mst_set):
        min_val = float('inf')
        min_index = -1
        for v in range(self.V):
            if key[v] < min_val and not mst_set[v]:
                min_val = key[v]
                min_index = v
        return min_index

    def prim_mst(self):
        parent = [-1] * self.V
        key = [float('inf')] * self.V
        key[0] = 0
        mst_set = [False] * self.V

        for _ in range(self.V):
            u = self.min_key(key, mst_set)
            mst_set[u] = True
            for v in range(self.V):
                if self.graph[u][v] and not mst_set[v] and self.graph[u][v] < key[v]:
                    parent[v] = u
                    key[v] = self.graph[u][v]

        self.print_mst(parent)

    def print_mst(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i], "-", i, "\t", self.graph[i][parent[i]])

# Example usage:
g = Graph(5)
g.add_edge(0, 1, 2)
g.add_edge(0, 2, 3)
g.add_edge(1, 3, 4)
g.add_edge(1, 4, 1)
g.add_edge(2, 3, 5)
g.add_edge(3, 4, 6)

g.prim_mst()

